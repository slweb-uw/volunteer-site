/********************************************************
*********************************************************
*********************************************************
*********************************************************
*********************************************************
*********************************************************
*********************************************************
*********************************************************
*********************************************************
*********************************************************

DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOU ARE DOING
AND USE EXTREME CAUTION EVEN IF YOU DO

*********************************************************
*********************************************************
*********************************************************
*********************************************************
*********************************************************
*********************************************************
*********************************************************
*********************************************************
*********************************************************
********************************************************/

import sanitizeHtml from "sanitize-html";

// The sanitize-html package allows URLs with no scheme
// We use this to require that the URL is of an allowed scheme
const strictSchemes = [
  "http://",
  "https://",
  "mailto:",
  "tel:"
];

// Sanitize the given dirty HTML into HTML that is safe to display and use on the site
// This is designed specifically to only support features provided by RichTextEditor
const sanitizeHtmlRichText = (html: string): string => {
  // This should be as strict as possible and manually kept this in sync with
  // functionality provided by components/richTextEditor.
  // Specifically, adjust this depending on extensions provided to the editor,
  // exact tags produced by extensions can be found with the extension documentation
  return sanitizeHtml(html, {
    allowedTags: [
      "p",            // paragraph
      "strong",       // bold
      "em",           // italics
      "u",            // underline
      "s",            // strikethrough
      "ul",           // unordered (bullet) list
      "ol",           // ordered (numbered) list
      "li",           // list item
      "br",           // break
      "a"             // link
    ],
    allowedAttributes: {
      p: [
        "style" // for text alignment
      ],
      a: [
        "href",
        "rel",
        "target"
      ]
    },
    allowedStyles: {
      p: {
        "text-align": [/^left$/, /^right$/, /^center$/, /^justify$/] // text alignment
      }
    },
    allowedSchemes: [
      // Keep in sync with strictSchemes defined above (for use in exclusiveFilter)
      "http",
      "https",
      "mailto",
      "tel"
    ],
    allowProtocolRelative: false,
    allowedClasses: {},
    exclusiveFilter: (frame) => {
      // Links must have "rel" and "target" attributes with exact values
      // The proper rel attribute prevents certain phishing attacks
      // The proper target attribute opens all links in a new tab so that the current window is never disturbed by a
      // user's link
      if (frame.tag === "a") {
        if (!frame.attribs.href) {
          // Link must have a reference
          return true;
        }

        let usesAllowedScheme = false;
        for (const scheme of strictSchemes) {
          if (frame.attribs.href.startsWith(scheme)) {
            usesAllowedScheme = true;
            break;
          }
        }

        if (!usesAllowedScheme) {
          // Link must use an allowed scheme (blank scheme disallowed)
          return true;
        }

        return frame.attribs.rel !== "noopener noreferrer nofollow" || frame.attribs.target !== "_blank";
      }

      return false;
    }
  });
}

export default sanitizeHtmlRichText;